using FtpVirtualDrive.Core.Interfaces;
using FtpVirtualDrive.Core.Models;
using Microsoft.Extensions.Logging;

namespace FtpVirtualDrive.Infrastructure.VirtualFileSystem;

/// <summary>
/// Simplified virtual file system implementation (placeholder for future Dokan integration)
/// </summary>
public class SimpleFtpVirtualFileSystem : IVirtualDrive
{
    private readonly ILogger<SimpleFtpVirtualFileSystem> _logger;

    public bool IsMounted { get; private set; }
    public string? MountedDriveLetter { get; private set; }
    public string? MountPath { get; private set; }

    public event EventHandler<VirtualFileSystemEventArgs>? FileOperation;
    public event EventHandler<MountStatusEventArgs>? MountStatusChanged;

    public SimpleFtpVirtualFileSystem(ILogger<SimpleFtpVirtualFileSystem> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<bool> MountAsync(string driveLetter, IFtpClient ftpClient)
    {
        await Task.Delay(100); // Simulate mount operation
        
        // Check if Dokan driver is installed
        var dokanInstalled = IsDokanDriverInstalled();
        
        if (!dokanInstalled)
        {
            var errorMessage = "Dokan driver is not installed. Please install Dokan Library from https://github.com/dokan-dev/dokany/releases to enable virtual drive mounting.";
            _logger.LogError(errorMessage);
            OnMountStatusChanged(false, null, errorMessage);
            return false;
        }
        
        _logger.LogInformation("Dokan driver detected but virtual drive mounting is currently disabled (integration pending)");
        
        MountedDriveLetter = driveLetter.ToUpper() + ":";
        MountPath = MountedDriveLetter + "\\";
        IsMounted = false; // Keep false until Dokan is properly integrated
        
        OnMountStatusChanged(false, null, "Virtual drive mounting feature is under development. Dokan integration pending.");
        return false;
    }

    private bool IsDokanDriverInstalled()
    {
        try
        {
            // Check for Dokan installation directory
            var programFiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
            var dokanPath = Path.Combine(programFiles, "Dokan");
            
            if (Directory.Exists(dokanPath))
            {
                var dokanDirs = Directory.GetDirectories(dokanPath, "Dokan Library-*");
                if (dokanDirs.Length > 0)
                {
                    _logger.LogInformation("Dokan installation found at: {DokanPath}", dokanDirs[0]);
                    return true;
                }
            }
            
            // Check for Dokan system driver
            using var process = new System.Diagnostics.Process();
            process.StartInfo.FileName = "sc";
            process.StartInfo.Arguments = "query dokan1";
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.CreateNoWindow = true;
            
            process.Start();
            var output = process.StandardOutput.ReadToEnd();
            process.WaitForExit();
            
            return process.ExitCode == 0 && output.Contains("SERVICE_NAME: dokan1");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error checking Dokan driver installation");
            return false;
        }
    }

    public async Task<bool> UnmountAsync()
    {
        await Task.Delay(100); // Simulate unmount operation
        
        IsMounted = false;
        MountedDriveLetter = null;
        MountPath = null;
        
        OnMountStatusChanged(false, null, null);
        return true;
    }

    public async Task<IEnumerable<string>> GetAvailableDriveLettersAsync()
    {
        return await Task.Run(() =>
        {
            var usedLetters = DriveInfo.GetDrives().Select(d => d.Name[0]).ToHashSet();
            var availableLetters = new List<string>();

            for (char letter = 'Z'; letter >= 'C'; letter--)
            {
                if (!usedLetters.Contains(letter))
                {
                    availableLetters.Add(letter.ToString());
                }
            }

            return availableLetters;
        });
    }

    private void OnMountStatusChanged(bool isMounted, string? driveLetter, string? errorMessage)
    {
        MountStatusChanged?.Invoke(this, new MountStatusEventArgs
        {
            IsMounted = isMounted,
            DriveLetter = driveLetter,
            ErrorMessage = errorMessage
        });
    }

    public void Dispose()
    {
        // Nothing to dispose in this simplified implementation
    }
}
